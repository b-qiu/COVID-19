rm(list = ls())
library("pacman")
p_load("tidyverse", "rvest",
"qdapRegex", "RCurl", "magrittr")
jh <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv") %>%
select(-`Province/State`, -`Long`, -`Lat`) %>%
filter(`Country/Region` == "Australia") %>%
gather(dates, cases, -`Country/Region`) %>%
group_by(dates) %>%
summarize(cases = sum(cases)) %>%
mutate(dates = as.Date(dates, "%m/%d/%y")) %>%
arrange(dates) %>%
mutate(cases = c(0,diff(cases)))
ow <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/new_cases.csv") %>%
select(date, Australia) %>%
mutate(date = date - 1) %>%
rename(dates = date, cases = Australia)
wo <- read_html("https://www.worldometers.info/coronavirus/country/australia/") %>%
html_node("body") %>%
xml_find_all("//script[contains(@type, 'text/javascript')]") %>%
html_text() %>%
extract2(11) %>%
rm_between("[", "]", extract = T)
xlab <- wo[[1]][1] %>%
str_split(",") %>%
unlist(use.names = F) %>%
str_sub(2, 7) %>%
as.Date("%b %d")
ylab <- wo[[1]][2] %>%
str_split(",") %>%
unlist(use.names = F) %>%
str_replace("null", "0") %>%
as.numeric()
wo <- data.frame(dates = xlab, cases = ylab)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
saveRDS(wo, file = "worldometer_data.RDS")
saveRDS(ow, file = "our_world_data.RDS")
saveRDS(jh, file = "john_hopkins_data.RDS")
source <- JH
source <- jh
delay = 5
duration = 60
new_cases = 5
growth = 0.45
k_1 = 0.4
k_2 = 0.25
bias = -12
source <- source
last_date <- as.Date(tail(source$dates,1))
sim_start_tp <- delay
sim_dur <- duration
sim_start_c <- new_cases
sim_g <- growth
k_1 = k_1
k_2 = k_2
front_bias = bias
sim_date_range <- seq.Date(from = last_date + sim_start_tp, length.out = sim_dur, by =  "days")
x_1 <- seq(1, sim_dur, 1)
midpoint_1 = ifelse(sim_dur %% 2 == 0,
(sim_dur)/2 + front_bias,
(sim_dur + 1)/2 + front_bias)
sim <- data.frame(x = x_1) %>%
mutate(logistic = ifelse(x <= midpoint_1,
(-1 / (1 + exp(-k_1 * (x - midpoint_1)))+1),
(-1 / (1 + exp(-k_2 * (x - midpoint_1)))+1)),
rate = logistic * sim_g + 1)
sim_ini <- data.frame(x = 0, logistic = NA, rate = sim_start_c)
sim_bind <- bind_rows(sim_ini, sim) %>%
mutate(total_cases = ceiling(cumprod(rate))) %>%
mutate(cases = c(sim_start_c, diff(total_cases)))
results_sim <- sim_bind %>%
filter(x != sim_dur) %>%
select(cases) %>%
mutate(dates = sim_date_range)
fill_dates <- seq.Date(last_date + 1, last_date + sim_start_tp - 1, "days")
fill <- data.frame(dates = fill_dates,
cases = 0)
data = bind_rows(source, fill, results_sim)
View(data)
data = data
si_mean = 3.96
si_sd = 4.75
d_min = as.Date("2020-02-01")
d_max = as.Date("2020-04-14")
r_y = NULL
c_y = NULL
R_results <- estimate_R(data$cases,
method = "parametric_si",
config = make_config(list(mean_si = si_mean,
std_si = si_sd))) %>%
extract2(1) %>%
mutate(dates = data$dates[8:nrow(data)],
cases = data$cases[8:nrow(data)])
library("EpiEstim")
library("tidyverse")
library("ggpubr")
library("shiny")
library("scales")
R_results <- estimate_R(data$cases,
method = "parametric_si",
config = make_config(list(mean_si = si_mean,
std_si = si_sd))) %>%
extract2(1) %>%
mutate(dates = data$dates[8:nrow(data)],
cases = data$cases[8:nrow(data)])
date_limits <- as.Date(c(d_min, d_max))
heightcheck_r <- R_results %>%
filter(dates >= as.Date(d_min) & dates <= as.Date(d_max)) %>%
summarise(max = max(`Mean(R)`)) %>%
extract2(1)
heightcheck_c <- R_results %>%
filter(dates >= as.Date(d_min) & dates <= as.Date(d_max)) %>%
summarise(max = max(cases)) %>%
extract2(1)
if(is.numeric(r_y)){
y_max_r = r_y
} else {
y_max_r <- ifelse(heightcheck_r <= 3.8,
heightcheck_r * 1.2,
3.8 * 1.2)
}
if(is.numeric(c_y)){
y_max_c = c_y
} else {
y_max_c <- heightcheck_c * 1.2
}
p_r <- ggplot(R_results, aes(dates, `Mean(R)`)) +
geom_ribbon(aes(ymin = `Quantile.0.05(R)`,
ymax = `Quantile.0.95(R)`), fill = "grey70") +
geom_line() +
geom_hline(yintercept=1, linetype="dashed", color = "red") +
coord_cartesian(xlim = date_limits, ylim = c(0, y_max_r)) +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d") +
ggtitle("Estimated instantaneous reproduction number") +
theme_bw() +
labs(y = "Estimated R (95% CI)") +
theme_update(plot.margin = margin(20, 20, 20, 20),
axis.title.x = element_blank())
p_c <- ggplot(R_results, aes(dates, cases)) +
geom_col() +
scale_x_date(date_breaks = "5 days", date_labels = "%b %d") +
coord_cartesian(xlim = date_limits, ylim = c(0, y_max_c)) +
theme_bw() +
ggtitle("Number of confirmed new cases") +
labs(y = "Number of new cases") +
theme_update(plot.margin = margin(20, 20, 20, 20),
axis.title.x = element_blank())
p_r
p_c
runApp()
runApp()
options(shiny.reactlog=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
